
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Cup;

import Analizadores.Flex.Lexer;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;
import javax.swing.JTextArea;
import Objetos.Estructura;
import Objetos.EstructuraIndividual;
import Objetos.EstructuraMultiple;
import Objetos.EstructuraPrimaria;
import Objetos.MoverMotor;
import Objetos.MoverPrimario;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\011\005\000\002\006\005\000\002\007\005\000" +
    "\002\005\004\000\002\005\003\000\002\004\004\000\002" +
    "\004\003\000\002\010\005\000\002\033\004\000\002\033" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\012\004\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\014\000\002\015\014\000\002\016\014\000" +
    "\002\017\014\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\036\003\000\002\036\003\000\002\035" +
    "\003\000\002\035\003\000\002\020\012\000\002\021\012" +
    "\000\002\022\012\000\002\023\012\000\002\024\012\000" +
    "\002\025\012\000\002\026\012\000\002\027\012\000\002" +
    "\030\012\000\002\031\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\006\010\013\012\005\001\002\000\004\002" +
    "\ufffc\001\002\000\004\010\013\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\241\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\000\001\002" +
    "\000\036\004\032\005\031\006\027\007\025\020\026\021" +
    "\047\022\014\023\046\024\053\025\021\026\024\027\030" +
    "\030\050\031\022\001\002\000\004\015\232\001\002\000" +
    "\030\011\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\001\002\000" +
    "\030\011\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\001\002\000" +
    "\030\011\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\001\002\000" +
    "\030\011\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\001\002\000" +
    "\004\015\223\001\002\000\004\015\214\001\002\000\014" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\001\002\000" +
    "\004\015\205\001\002\000\004\015\174\001\002\000\004" +
    "\015\165\001\002\000\004\015\154\001\002\000\004\015" +
    "\145\001\002\000\004\015\134\001\002\000\004\015\121" +
    "\001\002\000\030\011\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\001\002\000\030\011\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\001\002\000\030\011\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\001\002\000\030\011\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\001\002\000\014\004\uffee\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\001\002\000\014\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\011\uffef\001\002\000\014\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\011\ufff0\001\002\000\030\011\120\020\026\021\047" +
    "\022\014\023\046\024\053\025\021\026\024\027\030\030" +
    "\050\031\022\001\002\000\030\011\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\001\002\000\014\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\011\ufff1\001\002\000\030\011\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\001\002\000\004\015\110\001\002\000" +
    "\004\015\101\001\002\000\004\015\067\001\002\000\014" +
    "\004\032\005\031\006\027\007\025\011\065\001\002\000" +
    "\030\011\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\001\002\000" +
    "\004\015\054\001\002\000\004\014\055\001\002\000\004" +
    "\017\056\001\002\000\006\034\060\035\057\001\002\000" +
    "\004\017\uffd7\001\002\000\004\017\uffd8\001\002\000\004" +
    "\017\062\001\002\000\004\014\063\001\002\000\004\016" +
    "\064\001\002\000\030\011\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\001\002\000\010\002\ufff4\010\ufff4\013\ufff4\001\002" +
    "\000\014\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\001" +
    "\002\000\004\014\070\001\002\000\004\017\071\001\002" +
    "\000\010\034\074\035\072\036\075\001\002\000\004\017" +
    "\uffdc\001\002\000\004\017\076\001\002\000\004\017\uffdd" +
    "\001\002\000\004\017\uffdb\001\002\000\004\014\077\001" +
    "\002\000\004\016\100\001\002\000\030\011\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\001\002\000\004\014\102\001\002" +
    "\000\004\017\103\001\002\000\006\034\060\035\057\001" +
    "\002\000\004\017\105\001\002\000\004\014\106\001\002" +
    "\000\004\016\107\001\002\000\030\011\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\001\002\000\004\014\111\001\002\000" +
    "\004\017\112\001\002\000\006\034\060\035\057\001\002" +
    "\000\004\017\114\001\002\000\004\014\115\001\002\000" +
    "\004\016\116\001\002\000\030\011\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\001\002\000\030\011\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\001\002\000\010\002\ufffb\010\ufffb\013\ufffb" +
    "\001\002\000\004\014\122\001\002\000\004\017\123\001" +
    "\002\000\010\034\074\035\072\036\075\001\002\000\004" +
    "\017\125\001\002\000\004\014\126\001\002\000\004\017" +
    "\127\001\002\000\006\032\130\033\132\001\002\000\004" +
    "\016\uffda\001\002\000\004\016\133\001\002\000\004\016" +
    "\uffd9\001\002\000\014\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\011\uffe1\001\002\000\004\014\135\001\002\000\004\017" +
    "\136\001\002\000\010\034\074\035\072\036\075\001\002" +
    "\000\004\017\140\001\002\000\004\014\141\001\002\000" +
    "\004\017\142\001\002\000\006\032\130\033\132\001\002" +
    "\000\004\016\144\001\002\000\014\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\011\uffe0\001\002\000\004\014\146\001\002" +
    "\000\004\017\147\001\002\000\006\034\060\035\057\001" +
    "\002\000\004\017\151\001\002\000\004\014\152\001\002" +
    "\000\004\016\153\001\002\000\030\011\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\001\002\000\004\014\155\001\002\000" +
    "\004\017\156\001\002\000\010\034\074\035\072\036\075" +
    "\001\002\000\004\017\160\001\002\000\004\014\161\001" +
    "\002\000\004\017\162\001\002\000\006\032\130\033\132" +
    "\001\002\000\004\016\164\001\002\000\014\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\011\uffdf\001\002\000\004\014\166" +
    "\001\002\000\004\017\167\001\002\000\006\034\060\035" +
    "\057\001\002\000\004\017\171\001\002\000\004\014\172" +
    "\001\002\000\004\016\173\001\002\000\030\011\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\001\002\000\004\014\175\001" +
    "\002\000\004\017\176\001\002\000\010\034\074\035\072" +
    "\036\075\001\002\000\004\017\200\001\002\000\004\014" +
    "\201\001\002\000\004\017\202\001\002\000\006\032\130" +
    "\033\132\001\002\000\004\016\204\001\002\000\014\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\011\uffde\001\002\000\004" +
    "\014\206\001\002\000\004\017\207\001\002\000\006\034" +
    "\060\035\057\001\002\000\004\017\211\001\002\000\004" +
    "\014\212\001\002\000\004\016\213\001\002\000\030\011" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\001\002\000\004\014" +
    "\215\001\002\000\004\017\216\001\002\000\010\034\074" +
    "\035\072\036\075\001\002\000\004\017\220\001\002\000" +
    "\004\014\221\001\002\000\004\016\222\001\002\000\030" +
    "\011\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\001\002\000\004" +
    "\014\224\001\002\000\004\017\225\001\002\000\006\034" +
    "\060\035\057\001\002\000\004\017\227\001\002\000\004" +
    "\014\230\001\002\000\004\016\231\001\002\000\030\011" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\001\002\000\004\014" +
    "\233\001\002\000\004\017\234\001\002\000\006\034\060" +
    "\035\057\001\002\000\004\017\236\001\002\000\004\014" +
    "\237\001\002\000\004\016\240\001\002\000\030\011\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\001\002\000\004\002\001" +
    "\001\002\000\006\010\ufff7\013\ufff7\001\002\000\006\010" +
    "\253\013\252\001\002\000\006\010\250\013\247\001\002" +
    "\000\006\010\ufff5\013\ufff5\001\002\000\006\010\ufff8\013" +
    "\ufff8\001\002\000\004\002\ufff9\001\002\000\026\020\026" +
    "\021\047\022\014\023\046\024\053\025\021\026\024\027" +
    "\030\030\050\031\022\001\002\000\006\010\ufff6\013\ufff6" +
    "\001\002\000\004\002\ufffa\001\002\000\012\004\032\005" +
    "\031\006\027\007\025\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\016\002\007\003\011\006\006\007\010\010" +
    "\005\011\003\001\001\000\002\001\001\000\012\004\242" +
    "\005\243\010\244\011\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\012\041\013\014\014\043\015\040\016" +
    "\037\017\036\020\042\021\051\022\044\023\015\024\033" +
    "\025\032\026\017\027\035\030\034\031\016\032\022\033" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\013\116\020\042\021\051\022\044\023\015\024" +
    "\033\025\032\026\017\027\035\030\034\031\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\043\015\040\016\037\017\036\032\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\250\001\001\000\004\011\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\012" +
    "\041\013\014\020\042\021\051\022\044\023\015\024\033" +
    "\025\032\026\017\027\035\030\034\031\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\043\015\040" +
    "\016\037\017\036\032\022\033\050\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	JTextArea areaError;
	private Estructura estructura;
	
	public Estructura getEstructura(){
		return 	estructura;	
	}
    public parser(Lexer lex, JTextArea area) {
        super(lex);
	this.areaError = area;
    }



  public void syntax_error(Symbol cur_token) {
        System.out.println("No es correcto el orden de la palabra: " +cur_token.value+ " FILA: " + cur_token.left + ", COLUMNA: " +cur_token.right  );
	areaError.append("No es correcto el orden de la palabra: " +cur_token.value+ " , fila: " + cur_token.left + ", columna: " +cur_token.right  );
    }    
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= global EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // global ::= empezar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Estructura e = (Estructura)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("TERMINE"); estructura = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // empezar ::= moverTrayecto 
            {
              Estructura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Estructura e = (Estructura)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empezar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // empezar ::= moverTrayectoPrimario 
            {
              Estructura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Estructura e = (Estructura)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empezar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // empezar ::= moverGrupo 
            {
              Estructura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EstructuraIndividual e = (EstructuraIndividual)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empezar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // empezar ::= moverPrimario 
            {
              Estructura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EstructuraPrimaria e = (EstructuraPrimaria)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empezar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // moverPrimario ::= INI estructurasPrimaria FIN 
            {
              EstructuraPrimaria RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<MoverPrimario> e = (List<MoverPrimario>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new EstructuraPrimaria(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverPrimario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // moverTrayecto ::= INITRAYECTO cicloMover FINTRAYECTO 
            {
              Estructura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<EstructuraIndividual> e = (List<EstructuraIndividual>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new EstructuraMultiple(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverTrayecto",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // moverTrayectoPrimario ::= INITRAYECTO cicloMoverPrimario FINTRAYECTO 
            {
              Estructura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<MoverPrimario> e = (List<MoverPrimario>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new EstructuraPrimaria(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverTrayectoPrimario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cicloMoverPrimario ::= cicloMoverPrimario moverPrimario 
            {
              List<MoverPrimario> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<MoverPrimario> e1 = (List<MoverPrimario>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EstructuraPrimaria e2 = (EstructuraPrimaria)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
e1.add(e2.getLista().get(0));
RESULT = e1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloMoverPrimario",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cicloMoverPrimario ::= moverPrimario 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EstructuraPrimaria e = (EstructuraPrimaria)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = e.getLista();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloMoverPrimario",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cicloMover ::= cicloMover moverGrupo 
            {
              List<EstructuraIndividual> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<EstructuraIndividual> e1 = (List<EstructuraIndividual>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EstructuraIndividual e2 = (EstructuraIndividual)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
e1.add(e2);
RESULT = e1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloMover",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cicloMover ::= moverGrupo 
            {
              List<EstructuraIndividual> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EstructuraIndividual e = (EstructuraIndividual)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
List<EstructuraIndividual> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloMover",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // moverGrupo ::= INI estructuras FIN 
            {
              EstructuraIndividual RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<MoverMotor> e = (List<MoverMotor>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new EstructuraIndividual(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverGrupo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estructuras ::= estructuras estructura 
            {
              List<MoverMotor> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<MoverMotor> e1 = (List<MoverMotor>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<MoverMotor> e2 = (List<MoverMotor>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

e1.add(e2.get(0));
RESULT = e1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuras",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructuras ::= estructura 
            {
              List<MoverMotor> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<MoverMotor> e = (List<MoverMotor>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	List<MoverMotor> lista = new ArrayList<>();
	lista.add(e.get(0));
	RESULT = lista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuras",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura ::= moverA 
            {
              List<MoverMotor> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverMotor e = (MoverMotor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
List<MoverMotor> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura ::= moverB 
            {
              List<MoverMotor> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverMotor e = (MoverMotor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
List<MoverMotor> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estructura ::= moverC 
            {
              List<MoverMotor> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverMotor e = (MoverMotor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
List<MoverMotor> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estructura ::= moverD 
            {
              List<MoverMotor> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverMotor e = (MoverMotor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverMotor> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estructurasPrimaria ::= estructurasPrimaria estructuraPrimaria 
            {
              List<MoverPrimario> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<MoverPrimario> e1 = (List<MoverPrimario>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<MoverPrimario> e2 = (List<MoverPrimario>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
e1.add(e2.get(0));
RESULT = e1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructurasPrimaria",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estructurasPrimaria ::= estructuraPrimaria 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<MoverPrimario> e = (List<MoverPrimario>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
List<MoverPrimario> lista = new ArrayList<>();
	lista.add(e.get(0));
	RESULT = lista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructurasPrimaria",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // estructuraPrimaria ::= moverAdelante 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverPrimario e = (MoverPrimario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverPrimario> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrimaria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estructuraPrimaria ::= moverAtras 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverPrimario e = (MoverPrimario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverPrimario> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrimaria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estructuraPrimaria ::= moverDerecha 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverPrimario e = (MoverPrimario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverPrimario> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrimaria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructuraPrimaria ::= moverIzquierda 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverPrimario e = (MoverPrimario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverPrimario> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrimaria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructuraPrimaria ::= moverArribaDerecha 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverPrimario e = (MoverPrimario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverPrimario> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrimaria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructuraPrimaria ::= moverArribaIzquierda 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverPrimario e = (MoverPrimario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverPrimario> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrimaria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estructuraPrimaria ::= moverAbajoDerecha 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverPrimario e = (MoverPrimario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverPrimario> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrimaria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estructuraPrimaria ::= moverAbajoIzquierda 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverPrimario e = (MoverPrimario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverPrimario> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrimaria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estructuraPrimaria ::= girarDerecha 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverPrimario e = (MoverPrimario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverPrimario> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrimaria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // estructuraPrimaria ::= girarIzquierda 
            {
              List<MoverPrimario> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoverPrimario e = (MoverPrimario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<MoverPrimario> lista = new ArrayList<>();
lista.add(e);
RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrimaria",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // moverA ::= MOVERA PAR_ABIERTO NUMEROS COMA tipoMovimiento COMA NUMEROS COMA sentido PAR_CERRADO 
            {
              MoverMotor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverMotor("a",Integer.parseInt(e1.toString()), Integer.parseInt(e2.toString()),e3,e4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // moverB ::= MOVERB PAR_ABIERTO NUMEROS COMA tipoMovimiento COMA NUMEROS COMA sentido PAR_CERRADO 
            {
              MoverMotor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverMotor("b",Integer.parseInt(e1.toString()), Integer.parseInt(e2.toString()),e3,e4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // moverC ::= MOVERC PAR_ABIERTO NUMEROS COMA tipoMovimiento COMA NUMEROS COMA sentido PAR_CERRADO 
            {
              MoverMotor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverMotor("c",Integer.parseInt(e1.toString()), Integer.parseInt(e2.toString()),e3,e4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // moverD ::= MOVERD PAR_ABIERTO NUMEROS COMA tipoMovimiento COMA NUMEROS COMA sentido PAR_CERRADO 
            {
              MoverMotor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverMotor("d",Integer.parseInt(e1.toString()), Integer.parseInt(e2.toString()),e3,e4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverD",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoMovimiento ::= MILI 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "M";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMovimiento",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoMovimiento ::= CM 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "C";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMovimiento",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipoMovimiento ::= GRADOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "G";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMovimiento",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentido ::= ADELANTE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentido",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentido ::= ATRAS 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentido",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoMovimientoSinGrados ::= MILI 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "M";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMovimientoSinGrados",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoMovimientoSinGrados ::= CM 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "C";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMovimientoSinGrados",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // moverAdelante ::= MOVERADELANTE PAR_ABIERTO NUMEROS COMA tipoMovimientoSinGrados COMA NUMEROS PAR_CERRADO 
            {
              MoverPrimario RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverPrimario("adelante", Integer.parseInt(e.toString()),e2,Integer.parseInt(e3.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverAdelante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // moverAtras ::= MOVERATRAS PAR_ABIERTO NUMEROS COMA tipoMovimientoSinGrados COMA NUMEROS PAR_CERRADO 
            {
              MoverPrimario RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverPrimario("atras", Integer.parseInt(e.toString()),e2,Integer.parseInt(e3.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverAtras",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // moverDerecha ::= MOVERDERECHA PAR_ABIERTO NUMEROS COMA tipoMovimientoSinGrados COMA NUMEROS PAR_CERRADO 
            {
              MoverPrimario RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverPrimario("derecha", Integer.parseInt(e.toString()),e2,Integer.parseInt(e3.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverDerecha",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // moverIzquierda ::= MOVERIZQUIERDA PAR_ABIERTO NUMEROS COMA tipoMovimientoSinGrados COMA NUMEROS PAR_CERRADO 
            {
              MoverPrimario RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverPrimario("izquierda", Integer.parseInt(e.toString()),e2,Integer.parseInt(e3.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverIzquierda",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // moverArribaDerecha ::= MOVERARRIBADERECHA PAR_ABIERTO NUMEROS COMA tipoMovimientoSinGrados COMA NUMEROS PAR_CERRADO 
            {
              MoverPrimario RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverPrimario("arribaDerecha", Integer.parseInt(e.toString()),e2,Integer.parseInt(e3.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverArribaDerecha",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // moverArribaIzquierda ::= MOVERARRIBAIZQUIERDA PAR_ABIERTO NUMEROS COMA tipoMovimientoSinGrados COMA NUMEROS PAR_CERRADO 
            {
              MoverPrimario RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverPrimario("arribaIzquierda", Integer.parseInt(e.toString()),e2,Integer.parseInt(e3.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverArribaIzquierda",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // moverAbajoDerecha ::= MOVERABAJODERECHA PAR_ABIERTO NUMEROS COMA tipoMovimientoSinGrados COMA NUMEROS PAR_CERRADO 
            {
              MoverPrimario RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverPrimario("abajoDerecha", Integer.parseInt(e.toString()),e2,Integer.parseInt(e3.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverAbajoDerecha",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // moverAbajoIzquierda ::= MOVERABAJOIZQUIERDA PAR_ABIERTO NUMEROS COMA tipoMovimientoSinGrados COMA NUMEROS PAR_CERRADO 
            {
              MoverPrimario RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverPrimario("abajoIzquierda", Integer.parseInt(e.toString()),e2,Integer.parseInt(e3.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moverAbajoIzquierda",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // girarDerecha ::= GIRARDERECHA PAR_ABIERTO NUMEROS COMA tipoMovimiento COMA NUMEROS PAR_CERRADO 
            {
              MoverPrimario RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverPrimario("girarDerecha", Integer.parseInt(e.toString()),e2,Integer.parseInt(e3.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("girarDerecha",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // girarIzquierda ::= GIRARIZQUIERDA PAR_ABIERTO NUMEROS COMA tipoMovimiento COMA NUMEROS PAR_CERRADO 
            {
              MoverPrimario RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MoverPrimario("girarIzquierda", Integer.parseInt(e.toString()),e2,Integer.parseInt(e3.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("girarIzquierda",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
