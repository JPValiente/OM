
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 26 02:16:30 CST 2019
//----------------------------------------------------

package backend.analizadores;

import backend.objetos.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.lang.Math;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 26 02:16:30 CST 2019
  */
public class Analizador_Sintactico_Kok extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_Sintactico_Kok() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico_Kok(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico_Kok(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\010\002\000\002\007\006\000\002\007\003\000\002" +
    "\007\003\000\002\004\007\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\006\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\005" +
    "\000\002\005\003\000\002\005\004\000\002\006\003\000" +
    "\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\050\005\030\006\025\007\007\010\021\011" +
    "\013\012\024\013\014\014\010\015\027\016\012\017\005" +
    "\020\004\021\031\022\017\023\026\024\016\025\015\036" +
    "\023\040\006\001\002\000\010\036\034\041\032\042\035" +
    "\001\002\000\010\036\034\041\032\042\035\001\002\000" +
    "\004\002\uffff\001\002\000\010\036\034\041\032\042\035" +
    "\001\002\000\054\002\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\027\uffec\036\uffec\040\uffec\001\002\000\004\002\000" +
    "\001\002\000\010\036\034\041\032\042\035\001\002\000" +
    "\054\002\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\027\uffef" +
    "\036\uffef\040\uffef\001\002\000\054\002\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\027\uffed\036\uffed\040\uffed\001\002" +
    "\000\010\036\034\041\032\042\035\001\002\000\054\002" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4\036\uffe4" +
    "\040\uffe4\001\002\000\054\002\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\027\uffe6\036\uffe6\040\uffe6\001\002\000\006" +
    "\002\ufffd\040\061\001\002\000\010\036\034\041\032\042" +
    "\035\001\002\000\004\002\057\001\002\000\056\002\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\031\055\036" +
    "\uffe3\040\uffe3\001\002\000\054\002\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\027\uffee\036\uffee\040\uffee\001\002\000" +
    "\010\036\034\041\032\042\035\001\002\000\054\002\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5\036\uffe5\040" +
    "\uffe5\001\002\000\012\036\034\037\052\041\032\042\035" +
    "\001\002\000\010\036\034\041\032\042\035\001\002\000" +
    "\054\002\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7" +
    "\036\uffe7\040\uffe7\001\002\000\072\002\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\040\ufff6\043\ufff6\001" +
    "\002\000\064\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\032\040\033\037\034\043\035\041\036\ufff3\040" +
    "\ufff3\001\002\000\072\002\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\040\ufff5\043\ufff5\001\002\000\010" +
    "\036\034\041\032\042\035\001\002\000\014\032\040\033" +
    "\037\034\043\035\041\043\ufff8\001\002\000\010\036\034" +
    "\041\032\042\035\001\002\000\010\036\034\041\032\042" +
    "\035\001\002\000\010\036\034\041\032\042\035\001\002" +
    "\000\004\043\045\001\002\000\010\036\034\041\032\042" +
    "\035\001\002\000\072\002\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\040\ufffa\043\ufffa\001\002\000\072" +
    "\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\040\ufff7\043\ufff7\001\002\000\072\002\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\032\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\036\ufff9\040\ufff9\043\ufff9\001" +
    "\002\000\072\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\032\ufffc\033\ufffc\034\043\035" +
    "\041\036\ufffc\040\ufffc\043\ufffc\001\002\000\072\002\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\032\ufffb\033\ufffb\034\043\035\041\036\ufffb\040\ufffb" +
    "\043\ufffb\001\002\000\064\002\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\027\uffdf\032\040\033\037\034\043\035\041" +
    "\036\uffdf\040\uffdf\001\002\000\054\002\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\027\uffde\036\uffde\040\uffde\001\002" +
    "\000\054\002\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\027" +
    "\uffeb\036\uffeb\040\uffeb\001\002\000\064\002\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\027\ufff2\032\040\033\037\034" +
    "\043\035\041\036\ufff2\040\ufff2\001\002\000\010\036\034" +
    "\041\032\042\035\001\002\000\064\002\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\027\uffe2\032\040\033\037\034\043" +
    "\035\041\036\uffe2\040\uffe2\001\002\000\004\002\001\001" +
    "\002\000\064\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\027\ufff0\032\040\033\037\034\043\035\041\036\ufff0\040" +
    "\ufff0\001\002\000\004\002\ufffe\001\002\000\014\026\063" +
    "\032\040\033\037\034\043\035\041\001\002\000\046\005" +
    "\030\006\025\007\007\010\021\011\013\012\024\013\014" +
    "\014\010\015\027\016\012\017\005\020\004\021\031\022" +
    "\017\023\026\024\016\025\015\036\023\001\002\000\050" +
    "\005\030\006\025\007\007\010\021\011\013\012\024\013" +
    "\014\014\010\015\027\016\012\017\005\020\004\021\031" +
    "\022\017\023\026\024\016\025\015\027\067\036\023\001" +
    "\002\000\050\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1" +
    "\036\uffe1\001\002\000\050\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\027\uffe0\036\uffe0\001\002\000\054\002\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\027\ufff4\036\ufff4\040\ufff4\001" +
    "\002\000\014\030\071\032\040\033\037\034\043\035\041" +
    "\001\002\000\010\036\034\041\032\042\035\001\002\000" +
    "\064\002\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8" +
    "\032\040\033\037\034\043\035\041\036\uffe8\040\uffe8\001" +
    "\002\000\064\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\027\ufff1\032\040\033\037\034\043\035\041\036\ufff1\040" +
    "\ufff1\001\002\000\064\002\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\027\uffea\032\040\033\037\034\043\035\041\036" +
    "\uffea\040\uffea\001\002\000\064\002\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\027\uffe9\032\040\033\037\034\043\035" +
    "\041\036\uffe9\040\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\010\002\021\003\010\004\017\001\001\000" +
    "\004\007\074\001\001\000\004\007\073\001\001\000\002" +
    "\001\001\000\004\007\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\053\001\001\000\002\001\001\000\006" +
    "\006\052\007\050\001\001\000\004\007\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\035\001\001\000\004\010\041\001" +
    "\001\000\004\007\047\001\001\000\004\007\046\001\001" +
    "\000\004\007\045\001\001\000\002\001\001\000\004\007" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\064\005\063\001\001\000\004\004\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico_Kok$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico_Kok$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico_Kok$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public manejadorCarrito manejador;
    public ArrayList<String> listaRepeat = new ArrayList<>();
    
    public Analizador_Sintactico_Kok(Analizador_Lexico_Kok lex, manejadorCarrito manejador) { 
            super(lex);
            this.manejador=manejador;
    }

    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("¡ Error Sintactico Recuperado !");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);      
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right +1;
        int columna = s.left +1;
        
        System.out.println("¡ Error Sintactico, Modo Panico ! ");
        System.out.println("\t\t-- Lexema: "+lexema);
        System.out.println("\t\t-- Fila: "+fila);
        System.out.println("\t\t-- Columna: "+columna);

        manejador.capturarMensajes("Lo siento amigo, no entiendo que quieres decir con: "+lexema);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_Sintactico_Kok$actions {



  private final Analizador_Sintactico_Kok parser;

  /** Constructor */
  CUP$Analizador_Sintactico_Kok$actions(Analizador_Sintactico_Kok parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico_Kok$do_action(
    int                        CUP$Analizador_Sintactico_Kok$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico_Kok$parser,
    java.util.Stack            CUP$Analizador_Sintactico_Kok$stack,
    int                        CUP$Analizador_Sintactico_Kok$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico_Kok$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico_Kok$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // C ::= Hexa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // C ::= A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // R ::= R ES1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 parser.listaRepeat.add(a); 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("R",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // R ::= ES1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 parser.listaRepeat.add(a); 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("R",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          
         
          

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ES1 ::= PositionXY A Coma A 
            {
              String RESULT =null;
		int pxyleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-3)).left;
		int pxyright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-3)).right;
		String pxy = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 parser.manejador.positionXY(x,y); RESULT = pxy+x+x+y; 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ES1 ::= PositionY A 
            {
              String RESULT =null;
		int pyleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).left;
		int pyright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).right;
		String py = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 parser.manejador.positionY(y); RESULT = py+y; 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ES1 ::= PositionX A 
            {
              String RESULT =null;
		int pxleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).left;
		int pxright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).right;
		String px = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 parser.manejador.positionX(x); RESULT = px+x; 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ES1 ::= Color C 
            {
              String RESULT =null;
		int clrleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).left;
		int clrright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).right;
		String clr = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 RESULT = clr+a; 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ES1 ::= ToCenter 
            {
              String RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String tc = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 parser.manejador.tocenter(); RESULT = tc; 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
         
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ES1 ::= Clears 
            {
              String RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		parser.manejador.clears(); RESULT = cl; 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ES1 ::= Left A 
            {
              String RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).right;
		String lf = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		parser.manejador.left(a); RESULT = lf+a; 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ES1 ::= Right A 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		parser.manejador.right(a); RESULT = r+a;
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ES1 ::= Backward A 
            {
              String RESULT =null;
		int bkleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).left;
		int bkright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).right;
		String bk = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		parser.manejador.backward(a); RESULT = bk+a;  
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ES1 ::= Forward A 
            {
              String RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).right;
		String fd = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 parser.manejador.forward(r); RESULT = fd+r; 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ES1 ::= Repeat A AbrirCorchetes R CerrarCorchetes 
            {
              String RESULT =null;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-4)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-4)).right;
		String rp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-3)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).value;
		int accionesleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).left;
		int accionesright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).right;
		String acciones = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 parser.manejador.repeat(num, parser.listaRepeat); RESULT = rp+num+ac+acciones+cc;  
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("ES1",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // A ::= Numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("A",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // A ::= AbrirParentesis A NT$0 CerrarParentesis 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).value;

              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("A",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
 RESULT = a; 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A ::= A Asterisco A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 int val1 = Integer.parseInt(a);
                            int val2 = Integer.parseInt(b);
                            int r = val1 * val2;
                            RESULT = String.valueOf(r); 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("A",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A ::= A Diagonal A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 int val1 = Integer.parseInt(a);
                            int val2 = Integer.parseInt(b);
                            int r = val1 / val2;
                            r = (int) (Math.round(r));
                            RESULT = String.valueOf(r); 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("A",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A ::= A Menos A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 int val1 = Integer.parseInt(a);
                            int val2 = Integer.parseInt(b);
                            int r = val1 - val2;
                            RESULT = String.valueOf(r); 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("A",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A ::= A Mas A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 int val1 = Integer.parseInt(a);
                            int val2 = Integer.parseInt(b);
                            int r = val1 + val2;
                            RESULT = String.valueOf(r); 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("A",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S1 ::= ES1 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= ES1 Comentario 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S1 ::= Comentario 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // GENESIS ::= S1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.peek()).value;
		 System.out.println(" ------------------------ Lectura de documento KOK terminada.  ------------------------ "); 
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("GENESIS",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico_Kok$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= GENESIS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico_Kok$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.elementAt(CUP$Analizador_Sintactico_Kok$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico_Kok$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico_Kok$parser.done_parsing();
          return CUP$Analizador_Sintactico_Kok$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

